# 1
# Model Technology ModelSim Microsemi vlog 10.5c Compiler 2016.07 Jul 21 2016
# Start time: 08:49:47 on Apr 10,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 08:49:47 on Apr 10,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GTEST_NAME=case_2 -GWR_NR=50 -GRD_NR=32 -GWRITE_ORDER=2 -GSEED_VAL=2448294078 -GREAD_ORDER=2 
# Start time: 08:49:47 on Apr 10,2024
# //  ModelSim Microsemi 10.5c Jul 21 2016
# //
# //  Copyright 1991-2016 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  ModelSim Microsemi and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU DON'T      ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 4: 
#   opcode = 6 (DIV) 44
#   operand_a = 4 44
#   operand_b = 9 44
# 
# Writing to register location 26: 
#   opcode = 2 (PASSB) 54
#   operand_a = -7 54
#   operand_b = 6 54
# 
# Writing to register location 19: 
#   opcode = 3 (ADD) 64
#   operand_a = 6 64
#   operand_b = 10 64
# 
# Writing to register location 25: 
#   opcode = 1 (PASSA) 74
#   operand_a = 10 74
#   operand_b = 3 74
# 
# Writing to register location 29: 
#   opcode = 5 (MULT) 84
#   operand_a = -13 84
#   operand_b = 9 84
# 
# Writing to register location 24: 
#   opcode = 0 (ZERO) 94
#   operand_a = 9 94
#   operand_b = 13 94
# 
# Writing to register location 4: 
#   opcode = 4 (SUB) 104
#   operand_a = 13 104
#   operand_b = 8 104
# 
# Writing to register location 22: 
#   opcode = 6 (DIV) 114
#   operand_a = -8 114
#   operand_b = 4 114
# 
# Writing to register location 24: 
#   opcode = 0 (ZERO) 124
#   operand_a = -12 124
#   operand_b = 6 124
# 
# Writing to register location 24: 
#   opcode = 0 (ZERO) 134
#   operand_a = -10 134
#   operand_b = 8 134
# 
# Writing to register location 3: 
#   opcode = 3 (ADD) 144
#   operand_a = 8 144
#   operand_b = 8 144
# 
# Writing to register location 7: 
#   opcode = 7 (MOD) 154
#   operand_a = -8 154
#   operand_b = 3 154
# 
# Writing to register location 29: 
#   opcode = 5 (MULT) 164
#   operand_a = -13 164
#   operand_b = 7 164
# 
# Writing to register location 7: 
#   opcode = 7 (MOD) 174
#   operand_a = -9 174
#   operand_b = 13 174
# 
# Writing to register location 11: 
#   opcode = 3 (ADD) 184
#   operand_a = 13 184
#   operand_b = 7 184
# 
# Writing to register location 15: 
#   opcode = 7 (MOD) 194
#   operand_a = 7 194
#   operand_b = 11 194
# 
# Writing to register location 11: 
#   opcode = 3 (ADD) 204
#   operand_a = 11 204
#   operand_b = 15 204
# 
# Writing to register location 31: 
#   opcode = 7 (MOD) 214
#   operand_a = 15 214
#   operand_b = 11 214
# 
# Writing to register location 28: 
#   opcode = 4 (SUB) 224
#   operand_a = -5 224
#   operand_b = 15 224
# 
# Writing to register location 20: 
#   opcode = 4 (SUB) 234
#   operand_a = 15 234
#   operand_b = 12 234
# 
# Writing to register location 7: 
#   opcode = 7 (MOD) 244
#   operand_a = 12 244
#   operand_b = 4 244
# 
# Writing to register location 2: 
#   opcode = 2 (PASSB) 254
#   operand_a = -12 254
#   operand_b = 7 254
# 
# Writing to register location 1: 
#   opcode = 1 (PASSA) 264
#   operand_a = -9 264
#   operand_b = 2 264
# 
# Writing to register location 15: 
#   opcode = 7 (MOD) 274
#   operand_a = -14 274
#   operand_b = 1 274
# 
# Writing to register location 1: 
#   opcode = 1 (PASSA) 284
#   operand_a = 1 284
#   operand_b = 15 284
# 
# Writing to register location 10: 
#   opcode = 2 (PASSB) 294
#   operand_a = 15 294
#   operand_b = 1 294
# 
# Writing to register location 11: 
#   opcode = 3 (ADD) 304
#   operand_a = -15 304
#   operand_b = 10 304
# 
# Writing to register location 22: 
#   opcode = 6 (DIV) 314
#   operand_a = -6 314
#   operand_b = 11 314
# 
# Writing to register location 24: 
#   opcode = 0 (ZERO) 324
#   operand_a = -5 324
#   operand_b = 6 324
# 
# Writing to register location 18: 
#   opcode = 2 (PASSB) 334
#   operand_a = 6 334
#   operand_b = 8 334
# 
# Writing to register location 7: 
#   opcode = 7 (MOD) 344
#   operand_a = -8 344
#   operand_b = 2 344
# 
# Writing to register location 21: 
#   opcode = 5 (MULT) 354
#   operand_a = -14 354
#   operand_b = 7 354
# 
# Writing to register location 6: 
#   opcode = 6 (DIV) 364
#   operand_a = -9 364
#   operand_b = 5 364
# 
# Writing to register location 1: 
#   opcode = 1 (PASSA) 374
#   operand_a = 5 374
#   operand_b = 6 374
# 
# Writing to register location 18: 
#   opcode = 2 (PASSB) 384
#   operand_a = 6 384
#   operand_b = 1 384
# 
# Writing to register location 8: 
#   opcode = 0 (ZERO) 394
#   operand_a = 1 394
#   operand_b = 2 394
# 
# Writing to register location 26: 
#   opcode = 2 (PASSB) 404
#   operand_a = 2 404
#   operand_b = 8 404
# 
# Writing to register location 28: 
#   opcode = 4 (SUB) 414
#   operand_a = 8 414
#   operand_b = 10 414
# 
# Writing to register location 4: 
#   opcode = 4 (SUB) 424
#   operand_a = 10 424
#   operand_b = 12 424
# 
# Writing to register location 20: 
#   opcode = 4 (SUB) 434
#   operand_a = -4 434
#   operand_b = 4 434
# 
# Writing to register location 13: 
#   opcode = 5 (MULT) 444
#   operand_a = -12 444
#   operand_b = 4 444
# 
# Writing to register location 13: 
#   opcode = 5 (MULT) 454
#   operand_a = -12 454
#   operand_b = 13 454
# 
# Writing to register location 31: 
#   opcode = 7 (MOD) 464
#   operand_a = 13 464
#   operand_b = 13 464
# 
# Writing to register location 26: 
#   opcode = 2 (PASSB) 474
#   operand_a = 13 474
#   operand_b = 15 474
# 
# Writing to register location 19: 
#   opcode = 3 (ADD) 484
#   operand_a = -1 484
#   operand_b = 10 484
# 
# Writing to register location 1: 
#   opcode = 1 (PASSA) 494
#   operand_a = -6 494
#   operand_b = 3 494
# 
# Writing to register location 9: 
#   opcode = 1 (PASSA) 504
#   operand_a = 3 504
#   operand_b = 1 504
# 
# Writing to register location 14: 
#   opcode = 6 (DIV) 514
#   operand_a = -15 514
#   operand_b = 9 514
# 
# Writing to register location 19: 
#   opcode = 3 (ADD) 524
#   operand_a = -7 524
#   operand_b = 14 524
# 
# Writing to register location 9: 
#   opcode = 1 (PASSA) 534
#   operand_a = 14 534
#   operand_b = 3 534
# 
# 
# Reading back the same register locations written...
# Read from register location 31: 
#   opcode = 7 (MOD)
#   operand_a = 13
#   operand_b = 13
#   rezultat = 0
#  dupa  operand_a = 13
#  dupa  operand_b = 13
#  dupa  opcode = 7
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 0
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 29: 
#   opcode = 5 (MULT)
#   operand_a = -13
#   operand_b = 7
#   rezultat = -91
#  dupa  operand_a = -13
#  dupa  operand_b = 7
#  dupa  opcode = 5
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: -91
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 20: 
#   opcode = 4 (SUB)
#   operand_a = -4
#   operand_b = 4
#   rezultat = -8
#  dupa  operand_a = -4
#  dupa  operand_b = 4
#  dupa  opcode = 4
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: -8
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 8
#   rezultat = 16
#  dupa  operand_a = 8
#  dupa  operand_b = 8
#  dupa  opcode = 3
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 16
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 25: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 3
#   rezultat = 10
#  dupa  operand_a = 10
#  dupa  operand_b = 3
#  dupa  opcode = 1
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 10
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 11: 
#   opcode = 3 (ADD)
#   operand_a = -15
#   operand_b = 10
#   rezultat = -5
#  dupa  operand_a = -15
#  dupa  operand_b = 10
#  dupa  opcode = 3
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: -5
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 26: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 15
#   rezultat = 15
#  dupa  operand_a = 13
#  dupa  operand_b = 15
#  dupa  opcode = 2
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 15
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 24: 
#   opcode = 0 (ZERO)
#   operand_a = -5
#   operand_b = 6
#   rezultat = 0
#  dupa  operand_a = -5
#  dupa  operand_b = 6
#  dupa  opcode = 0
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 0
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 27: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = 1
#   operand_b = 2
#   rezultat = 0
#  dupa  operand_a = 1
#  dupa  operand_b = 2
#  dupa  opcode = 0
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 0
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = 1
#   operand_b = 2
#   rezultat = 0
#  dupa  operand_a = 1
#  dupa  operand_b = 2
#  dupa  opcode = 0
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 0
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 10: 
#   opcode = 2 (PASSB)
#   operand_a = 15
#   operand_b = 1
#   rezultat = 1
#  dupa  operand_a = 15
#  dupa  operand_b = 1
#  dupa  opcode = 2
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 1
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 15: 
#   opcode = 7 (MOD)
#   operand_a = -14
#   operand_b = 1
#   rezultat = 0
#  dupa  operand_a = -14
#  dupa  operand_b = 1
#  dupa  opcode = 7
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 0
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 22: 
#   opcode = 6 (DIV)
#   operand_a = -6
#   operand_b = 11
#   rezultat = 0
#  dupa  operand_a = -6
#  dupa  operand_b = 11
#  dupa  opcode = 6
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 0
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = 14
#   operand_b = 3
#   rezultat = 14
#  dupa  operand_a = 14
#  dupa  operand_b = 3
#  dupa  opcode = 1
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 14
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 20: 
#   opcode = 4 (SUB)
#   operand_a = -4
#   operand_b = 4
#   rezultat = -8
#  dupa  operand_a = -4
#  dupa  operand_b = 4
#  dupa  opcode = 4
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: -8
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 13: 
#   opcode = 5 (MULT)
#   operand_a = -12
#   operand_b = 13
#   rezultat = -156
#  dupa  operand_a = -12
#  dupa  operand_b = 13
#  dupa  opcode = 5
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: -156
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 10: 
#   opcode = 2 (PASSB)
#   operand_a = 15
#   operand_b = 1
#   rezultat = 1
#  dupa  operand_a = 15
#  dupa  operand_b = 1
#  dupa  opcode = 2
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 1
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 8
#   rezultat = 16
#  dupa  operand_a = 8
#  dupa  operand_b = 8
#  dupa  opcode = 3
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 16
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 6: 
#   opcode = 6 (DIV)
#   operand_a = -9
#   operand_b = 5
#   rezultat = -1
#  dupa  operand_a = -9
#  dupa  operand_b = 5
#  dupa  opcode = 6
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: -1
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 26: 
#   opcode = 2 (PASSB)
#   operand_a = 13
#   operand_b = 15
#   rezultat = 15
#  dupa  operand_a = 13
#  dupa  operand_b = 15
#  dupa  opcode = 2
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 15
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 8
#   rezultat = 16
#  dupa  operand_a = 8
#  dupa  operand_b = 8
#  dupa  opcode = 3
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 16
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 19: 
#   opcode = 3 (ADD)
#   operand_a = -7
#   operand_b = 14
#   rezultat = 7
#  dupa  operand_a = -7
#  dupa  operand_b = 14
#  dupa  opcode = 3
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 7
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 29: 
#   opcode = 5 (MULT)
#   operand_a = -13
#   operand_b = 7
#   rezultat = -91
#  dupa  operand_a = -13
#  dupa  operand_b = 7
#  dupa  opcode = 5
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: -91
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 2: 
#   opcode = 2 (PASSB)
#   operand_a = -12
#   operand_b = 7
#   rezultat = 7
#  dupa  operand_a = -12
#  dupa  operand_b = 7
#  dupa  opcode = 2
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 7
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 28: 
#   opcode = 4 (SUB)
#   operand_a = 8
#   operand_b = 10
#   rezultat = -2
#  dupa  operand_a = 8
#  dupa  operand_b = 10
#  dupa  opcode = 4
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: -2
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 18: 
#   opcode = 2 (PASSB)
#   operand_a = 6
#   operand_b = 1
#   rezultat = 1
#  dupa  operand_a = 6
#  dupa  operand_b = 1
#  dupa  opcode = 2
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 1
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 14: 
#   opcode = 6 (DIV)
#   operand_a = -15
#   operand_b = 9
#   rezultat = -1
#  dupa  operand_a = -15
#  dupa  operand_b = 9
#  dupa  opcode = 6
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: -1
# REZULTATUL ESTE CEL ASTEPTAT
# 
# 
# Teste trecute: 27. Teste totale: 32.
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU DON'T      ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(102)
#    Time: 876 ns  Iteration: 1  Instance: /top/test
# End time: 08:49:48 on Apr 10,2024, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
