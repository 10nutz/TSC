# 1
# Model Technology ModelSim Microsemi vlog 10.5c Compiler 2016.07 Jul 21 2016
# Start time: 10:41:43 on Mar 27,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 10:41:43 on Mar 27,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GTEST_NAME=case_rnd_dec -GWR_NR=10 -GRD_NR=10 -GWRITE_ORDER=2 -GREAD_ORDER=1 
# Start time: 10:41:43 on Mar 27,2024
# //  ModelSim Microsemi 10.5c Jul 21 2016
# //
# //  Copyright 1991-2016 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  ModelSim Microsemi and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU DON'T      ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 4: 
#   opcode = 1 (PASSA) 44
#   operand_a = -12 44
#   operand_b = 7 44
# 
# Writing to register location 8: 
#   opcode = 0 (ZERO) 54
#   operand_a = -9 54
#   operand_b = 1 54
# 
# Writing to register location 7: 
#   opcode = 7 (MOD) 64
#   operand_a = -15 64
#   operand_b = 8 64
# 
# Writing to register location 21: 
#   opcode = 5 (MULT) 74
#   operand_a = -8 74
#   operand_b = 7 74
# 
# Writing to register location 3: 
#   opcode = 3 (ADD) 84
#   operand_a = -9 84
#   operand_b = 5 84
# 
# Writing to register location 28: 
#   opcode = 4 (SUB) 94
#   operand_a = 5 94
#   operand_b = 3 94
# 
# Writing to register location 3: 
#   opcode = 3 (ADD) 104
#   operand_a = 3 104
#   operand_b = 12 104
# 
# Writing to register location 30: 
#   opcode = 6 (DIV) 114
#   operand_a = 12 114
#   operand_b = 3 114
# 
# Writing to register location 25: 
#   opcode = 1 (PASSA) 124
#   operand_a = 3 124
#   operand_b = 14 124
# 
# Writing to register location 9: 
#   opcode = 1 (PASSA) 134
#   operand_a = -2 134
#   operand_b = 9 134
# 
# 
# Reading back the same register locations written...
# Read from register location 31: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 30: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
#   rezultat = 4
#  dupa  operand_a = 12
#  dupa  operand_b = 3
#  dupa  opcode = 6
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 4
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 29: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 28: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
#   rezultat = 2
#  dupa  operand_a = 5
#  dupa  operand_b = 3
#  dupa  opcode = 4
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 2
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 27: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 26: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 25: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 14
#   rezultat = 3
#  dupa  operand_a = 3
#  dupa  operand_b = 14
#  dupa  opcode = 1
# DATELE COMPARATE SUNT ACELEASI, CALCULEZ REZULTATUL...
# Rezultatul asteptat: 3
# REZULTATUL ESTE CEL ASTEPTAT
# 
# Read from register location 24: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# Read from register location 22: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
#   rezultat = 0
#  dupa  operand_a = x
#  dupa  operand_b = x
#  dupa  opcode = x
# DATELE COMPARATE NU SUNT ACELEASI.
# 
# 
# Teste trecute: 3. Teste totale: 10.
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU DON'T      ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(99)
#    Time: 256 ns  Iteration: 1  Instance: /top/test
# End time: 10:41:43 on Mar 27,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
